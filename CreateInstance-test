from __future__ import print_function
import sys
import boto3
import subprocess
from paramiko import SSHClient
import paramiko
from botocore.exceptions import ClientError
import psutil
import time

from openstack import connection
from keystoneauth1 import loading
from keystoneauth1 import session
from novaclient import client
from libcloud.compute.types import Provider
from libcloud.compute.providers import get_driver


# from CreateInstance import *


# from boto.ec2.instance import Instance as _Instance


def osInstance(appName, vmType):  # , imageType, nodeID):
    if vmType == "1":
        instanceType2run = "m1.medium"  # 2 vCPU 4 RAM
        numThread = "2"
    elif vmType == "2":
        instanceType2run = "m1.large"  # 4 vCPU 8 RAM
        numThread = "4"
    elif vmType == "3":
        instanceType2run = "m1.xxlarge"  # 8 vCPU 32 RAM
        numThread = "8"
    elif vmType == "4":
        instanceType2run = "m1.xxlarge"  # 16 vCPU 64 RAM # we don't have that one !!!!! repeat of last one
        numThread = "8"

    # instanceType2run = 't2.micro'  # microsmall

    commandsList = """cd ~; echo $PWD
        cd Downloads/NFS/NPB3.3.1/NPB3.3-OMP/; sh run1s-OMP-p-c-C-id-appName.sh aws """ + numThread + """ C remoteRun """ + appName + """ #class C 
        #sudo shutdown -f # sudo should be granted """
    # ImageId='ami-d94951a0'


    auth_args = {
        'auth_url': 'https://openstack.tacc.chameleoncloud.org:5000/v2.0',
        'project_name': 'CH-819237',
        'username': 'hrmoradi',
        'password': 'H@mid113818113818',
    }
    auth_username = 'hrmoradi'
    auth_password = 'H@mid113818113818'
    auth_url = 'https://openstack.tacc.chameleoncloud.org:5000/v2.0'
    project_name = 'CH-819237'
    #region_name = 'your_region_name'

    provider = get_driver(Provider.OPENSTACK)
    conn = provider(auth_username,
                    auth_password,
                    ex_force_auth_url=auth_url,
                    ex_force_auth_version='2.0_password',
                    ex_tenant_name=project_name)#,
                    #ex_force_service_region=region_name)
    osC = connection.Connection(**auth_args)
    # net id fc4910e2-5fb8-4d85-a8a1-ccf0da8ec18b
    # OS_REGION_NAME="RegionOne"

    image = osC.compute.find_image('xenial')
    flavor = osC.compute.find_flavor(instanceType2run)
    network = osC.network.find_network('int-net')
    keypair = osC.compute.find_keypair('ch-key')

    #server = osC.compute.create_server(name='test-py', image_id=image.id, flavor_id=flavor.id, networks=[{"uuid": network.id}], key_name=keypair.name)

    #server = osC.compute.wait_for_server(server)
    #ip = server.access_ipv4
    #id = server.id
    #print (id)

    osC = connection.Connection(**auth_args)
    for server in osC.compute.servers():
        print(server)


    #print("ssh -i {key} root@{ip}".format(key=PRIVATE_KEYPAIR_FILE, ip=server.access_ipv4))



    loader = loading.get_plugin_loader('password')
    auth = loader.load_from_options(auth_url='https://openstack.tacc.chameleoncloud.org:5000/v2.0', username = 'hrmoradi', password = 'H@mid113818113818', project_id = 'CH-819237')
    sess = session.Session(auth=auth)
    nova = client.Client('2', session=sess)
    print (nova.servers.list())
    print (nova.flavors.list())


    #fip = nova.floating_ips.create()
    #nova.floating_ip_pools.list()
    #floating_ip = nova.floating_ips.create(nova.floating_ip_pools.list()[0].name)
    #instance = nova.servers.find(id=id)
    #instance.add_floating_ip(floating_ip)

    for instance in conn.list_nodes():
        print(instance)
    #13
    private_ip = None
    if len(instance.private_ips):
        private_ip = instance.private_ips[0]
        print('Private IP found: {}'.format(private_ip))
    #14
    public_ip = None
    if len(instance.public_ips):
        public_ip = instance.public_ips[0]
        print('Public IP found: {}'.format(public_ip))
    #15
    print('Checking for unused Floating IP...')
    unused_floating_ip = None
    for floating_ip in conn.ex_list_floating_ips():
        if not floating_ip.node_id:
            unused_floating_ip = floating_ip
            break

    if not unused_floating_ip and len(conn.ex_list_floating_ip_pools()):
        pool = conn.ex_list_floating_ip_pools()[0]
        print('Allocating new Floating IP from pool: {}'.format(pool))
        unused_floating_ip = pool.create_floating_ip()
    #16
    if public_ip:
        print('Instance ' + instance.name + ' already has a public ip. Skipping attachment.')
    elif unused_floating_ip:
        conn.ex_attach_floating_ip_to_node(instance, unused_floating_ip)
    #17
    actual_ip_address = None
    if public_ip:
        actual_ip_address = public_ip
    elif unused_floating_ip:
        actual_ip_address = unused_floating_ip.ip_address
    elif private_ip:
        actual_ip_address = private_ip

    print('The Fractals app will be deployed to http://{}'.format(actual_ip_address))

    osC.destroy_node(instance)

    '''
    print(' ')
    print('ec2c.describe_instances():', response)
    print(' ')

    print('Current VMs')
    instances = ec2s.instances.filter()
    for instance in instances:
        print('   ', instance.state["Name"], ', ', instance.id, ', ', instance.public_ip_address, ', ',
              instance.private_ip_address, ', ', instance.instance_type)
        # , u'InstanceId': 'i-06bf8ec62112ea75e',
        # , u'State': {u'Code': 16, u'Name': 'running'},
        # , u'Tags': [{u'Value': 'm0', u'Key': 'Name'}] ,
    print(' ')

    # key_pair = ec2.create_key_pair('ec2-sample-key')  # only needs to be done once
    # key_pair.save('/Users/patrick/.ssh')
    # exit(0)
    # reservationc = ec2c.run_instances(ImageId='ami-491b7c29',MinCount=1,MaxCount=1,InstanceType=instanceType2run)
    instanceCreated = ec2s.create_instances(ImageId='ami-d94951a0', MinCount=1, MaxCount=1,
                                            InstanceType=instanceType2run, KeyName='aws',
                                            SecurityGroups=['launch-wizard-1'])
    # class instance1:
    #    id = "i-017a788e21dcda1c7"
    # instanceCreated = [instance1]

    print('Checking VM Creation')
    notCreated = 0
    while notCreated == 0:
        sys.stdout.write('.')
        ec2s = boto3.resource('ec2', aws_access_key_id='AKIAJSFSIMVMOOXMC2AQ',
                              aws_secret_access_key='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',
                              region_name='us-west-2')  # 3
        instances = ec2s.instances.filter()
        # Wait a minute or two while it boots
        for instance in instances:
            if instance.id == instanceCreated[0].id:
                print(' ')
                print('   instance with id >', instance.id, ' created.')
                notCreated = 1
                break

    print(' ')
    print('Checking IP assignment')
    wait4ip = 0
    while wait4ip == 0:
        sys.stdout.write('.')
        ec2s = boto3.resource('ec2', aws_access_key_id='AKIAJSFSIMVMOOXMC2AQ',
                              aws_secret_access_key='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',
                              region_name='us-west-2')
        instances = ec2s.instances.filter(InstanceIds=[instanceCreated[0].id])
        for instance in instances:
            # print ('wait 4 ip assignment:',  instance2.tags[0]["Value"],instance2.state["Name"])
            if instance.public_ip_address != None:
                print(' ')
                print('   IP assigned to instance with id >', instance.id, ' IP >', instance.public_ip_address)
                wait4ip = 1
                instanceCreatedIP = instance.public_ip_address
                break

    print(' ')
    print('Checking BOOT')
    i = 0
    boot = 0
    while boot == 0:
        try:
            i = i + 1
            ssh = SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh.connect(instanceCreatedIP, username="hrmoradi", password="113818", timeout=1)
            ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command('echo ready')
            for line in ssh_stdout:
                if 'ready' in line:
                    print(' ')
                    print('   line:', line)
                    print('   server booted in > ', i, 'th attempt.')
                    print('   ')
                    ssh_stdin.close()
                    ready = 1
                    boot = 1
                    break
            ssh_stdin.close()
        except:
            sys.stdout.write('.')

    print('CommandsList')
    i = 0
    for line in commandsList.splitlines():
        i = i + 1
        print('   line', i, ' :', line)
        # ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command(line)
        ssh = SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(instanceCreatedIP, username="hrmoradi", password="113818")
        sleeptime = 0.001
        ssh_transp = ssh.get_transport()
        chan = ssh_transp.open_session()
        # chan.settimeout(3 * 60 * 60)
        chan.setblocking(0)
        outdata, errdata = '', ''
        chan.exec_command(line)
        for OutputLines in ssh_stdout:
            print('      execution results: ssh_stdout >', OutputLines)
        while True:  # monitoring process
            # Reading from output streams
            while chan.recv_ready():
                outdata += chan.recv(1000)
            while chan.recv_stderr_ready():
                errdata += chan.recv_stderr(1000)
            if chan.exit_status_ready():  # If completed
                print('      execution results: outdata >')
                for OutputLines in outdata.splitlines():
                    print('                               ', OutputLines)
                print('      execution results: errdata >')
                for OutputLines in errdata.splitlines():
                    print('                               ', OutputLines)
                break
            time.sleep(sleeptime)
        retcode = chan.recv_exit_status()
        ssh_transp.close()
        print(' ')

    print(' ')
    print("Terminate instance")
    ec2c.terminate_instances(InstanceIds=[instanceCreated[0].id])
    i = 0
    wait4termination = 0
    while wait4termination == 0:
        i = i + 1
        sys.stdout.write('.')
        ec2s = boto3.resource('ec2', aws_access_key_id='AKIAJSFSIMVMOOXMC2AQ',
                              aws_secret_access_key='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',
                              region_name='us-west-2')
        instances = ec2s.instances.filter(InstanceIds=[instanceCreated[0].id])
        for instance in instances:
            # print ('wait 4 ip assignment:',  instance2.tags[0]["Value"],instance2.state["Name"])
            if instance.state["Name"] == 'terminated':
                print(' ')
                print('   server terminated in > ', i, 'th attempt.')
                wait4termination = 1
                break

    print(' ')
    print('End of CreateInstance.py')
    '''
def main(argv):
    osInstance("bt", "1")

if __name__ == "__main__":
    main(" ")
